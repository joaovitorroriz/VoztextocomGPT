<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conversa com GPT</title>
    <link rel="stylesheet" href="css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

</head>

<body>
        <div class="container" id="messageContainer"></div>
        <input type="text" id="userInput" placeholder="Digite sua mensagem...">
        <button id="sendMessageButton">Enviar</button>


        <div class="container">
            <h1>Conversor de Voz para Texto com GPT</h1>
            <button id="startRecording"><i class="fas fa-microphone"></i> Iniciar Gravação</button>

            <div id="outputText"></div>
        </div>

        <div class="container">
            <input type="text" id="textInput" placeholder="Digite seu texto aqui...">
            <button id="startRecording">enviar</button>
            
            <div id="outputText"></div>
        </div>

        <div class="input-container">
        <button id="startRecording"><i class="fas fa-microphone"></i> Iniciar Gravação</button>
        <input type="text" id="userInput" placeholder="Digite sua mensagem...">
        <button id="sendButton">Enviar</button>
        </div>


    <script src="js/script.js"></script>
</body>

</html>

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    
}

.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    text-align: center;
    margin-top: 20px;
    font-weight: bold;
}

.user-message {
    background-color: #007bff;
    color: #fff;
    padding: 10px;
    border-radius: 10px;
    max-width: 70%;
    margin-left: auto;
    margin-bottom: 10px;
}

.bot-message {
    background-color: #eee;
    color: #333;
    padding: 10px;
    border-radius: 10px;
    max-width: 70%;
    margin-right: auto;
    margin-bottom: 10px;
}
.input-container {
    background-color: #fff;
    padding: 10px;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    box-sizing: border-box;
    border-top: 1px solid #ccc;
}



#userInput {
    padding: 10px;
    width: calc(70% - 20px);
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #fff;
    box-sizing: border-box;
}

#sendButton {
    padding: 10px 20px;
    margin-left: 10px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: #fff;
    cursor: pointer;
}

.input-container {
    position: fixed;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
}


 
const messageContainer = document.getElementById('messageContainer');
const userInput = document.getElementById('userInput');
const sendMessageButton = document.getElementById('sendMessageButton');
const startRecordingButton = document.getElementById('startRecording');
const outputText = document.getElementById('outputText');
const textInput = document.getElementById('textInput');

const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();
recognition.lang = 'pt-BR';
recognition.interimResults = false;
recognition.maxAlternatives = 1;

sendMessageButton.addEventListener('click', () => {
    const userMessage = userInput.value;
    if (userMessage) {
        displayMessage(userMessage, 'user');
        // Enviar userMessage para o modelo GPT e obter a resposta do modelo.
        // Simule uma resposta do modelo GPT por enquanto.
        const botMessage = 'Olá! Sou o GPT, um assistente virtual. Como posso ajudar você hoje?';
        displayMessage(botMessage, 'bot');
        userInput.value = ''; // Limpar o campo de entrada do usuário após o envio da mensagem.
    }
});

function displayMessage(message, type) {
    const messageElement = document.createElement('div');
    messageElement.className = `${type}-message`;
    messageElement.textContent = message;
    messageContainer.appendChild(messageElement);
}


startRecordingButton.addEventListener('click', () => {
    recognition.start();

    recognition.onresult = (event) => {
        const speechToText = event.results[0][0].transcript;
        outputText.textContent = `Texto Reconhecido: ${speechToText}`;

        // Enviar speechToText para o backend (por exemplo, via AJAX) para processamento com GPT.
        // Chame uma função que faz a requisição para a API do seu backend para processamento com GPT aqui.
    };

    recognition.onerror = (event) => {
        console.error('Erro de Reconhecimento de Fala:', event.error);
    };
});

// Adicione um evento de clique ao botão de início da gravação
startRecordingButton.addEventListener('click', () => {
    // Verifica se há texto no campo de entrada
    const userInputText = textInput.value;
    
    if (userInputText) {
        outputText.textContent = `Texto Digitado: ${userInputText}`;
        // Enviar userInputText para o backend (por exemplo, via AJAX) para processamento com GPT.
        // Chame uma função que faz a requisição para a API do seu backend para processamento com GPT aqui.
    } else {
        outputText.textContent = 'Por favor, digite um texto válido.';
    }
});




const messageContainer = document.getElementById('messageContainer');
const userInput = document.getElementById('userInput');
const sendMessageButton = document.getElementById('sendMessageButton');
const startRecordingButton = document.getElementById('startRecording');
const outputText = document.getElementById('outputText');
const textInput = document.getElementById('textInput');

const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition)();
recognition.lang = 'pt-BR';
recognition.interimResults = false;
recognition.maxAlternatives = 1;

sendMessageButton.addEventListener('click', () => {
    const userMessage = userInput.value;
    if (userMessage) {
        displayMessage(userMessage, 'user');
        // Enviar userMessage para o modelo GPT e obter a resposta do modelo.
        // Simule uma resposta do modelo GPT por enquanto.
        const botMessage = 'Olá! Sou o GPT, um assistente virtual. Como posso ajudar você hoje?';
        displayMessage(botMessage, 'bot');
        userInput.value = ''; // Limpar o campo de entrada do usuário após o envio da mensagem.
    }
});

function displayMessage(message, type) {
    const messageElement = document.createElement('div');
    messageElement.className = `${type}-message`;
    messageElement.textContent = message;
    messageContainer.appendChild(messageElement);
}


startRecordingButton.addEventListener('click', () => {
    recognition.start();

    recognition.onresult = (event) => {
        const speechToText = event.results[0][0].transcript;
        outputText.textContent = `Texto Reconhecido: ${speechToText}`;

        // Enviar speechToText para o backend (por exemplo, via AJAX) para processamento com GPT.
        // Chame uma função que faz a requisição para a API do seu backend para processamento com GPT aqui.
    };

    recognition.onerror = (event) => {
        console.error('Erro de Reconhecimento de Fala:', event.error);
    };
});

// Adicione um evento de clique ao botão de início da gravação
startRecordingButton.addEventListener('click', () => {
    // Verifica se há texto no campo de entrada
    const userInputText = textInput.value;
    
    if (userInputText) {
        outputText.textContent = `Texto Digitado: ${userInputText}`;
        // Enviar userInputText para o backend (por exemplo, via AJAX) para processamento com GPT.
        // Chame uma função que faz a requisição para a API do seu backend para processamento com GPT aqui.
    } else {
        outputText.textContent = 'Por favor, digite um texto válido.';
    }
});
